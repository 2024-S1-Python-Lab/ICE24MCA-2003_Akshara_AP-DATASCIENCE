# -*- coding: utf-8 -*-
"""MicroProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Js7vR5qWlUY50hFkcuKKWOzpQxaIBvIo
"""

# Basic data science stack
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Scikit-learn components (only what we used)
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.tree import DecisionTreeClassifier

data=pd.read_csv('/content/german_credit_data.csv')
data.head(5)

data.info()

#checking for missing values
print(data.isnull().sum())

# Step 1: Fix missing values
data.fillna('unknown', inplace=True)

# Step 2: Check result
print(data.isnull().sum())

# Step 3: See dataset info
print(f"\nDataset shape: {data.shape}")
print(data.head(3))

# Check risk distribution
risk_counts = data['Risk'].value_counts()
print(risk_counts)

#Histogram of Age Distribution by Risk

plt.figure(figsize=(8, 6))
data[data['Risk'] == 'good']['Age'].hist(alpha=0.7, label='Good', bins=20, color='green')
data[data['Risk'] == 'bad']['Age'].hist(alpha=0.7, label='Bad', bins=20, color='red')
plt.title('Age Distribution by Risk')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.legend()
plt.show()

#SCATTERPLOT: Credit Amount vs Duration

plt.figure(figsize=(8, 6))
plt.scatter(data[data['Risk']=='good']['Duration'],
            data[data['Risk']=='good']['Credit amount'],
            alpha=0.6, label='Good', color='green')
plt.scatter(data[data['Risk']=='bad']['Duration'],
            data[data['Risk']=='bad']['Credit amount'],
            alpha=0.6, label='Bad', color='red')
plt.title('Credit Amount vs Duration by Risk')
plt.xlabel('Loan Duration (months)')
plt.ylabel('Credit Amount')
plt.legend()
plt.show()

# HISTOGRAM: Credit Amount Distribution

plt.figure(figsize=(8, 6))
data['Credit amount'].hist(bins=30, color='skyblue')
plt.title('Distribution of Credit Amount')
plt.xlabel('Credit Amount')
plt.ylabel('Frequency')
plt.show()

# BOX PLOT: Credit Amount by Risk


plt.figure(figsize=(10, 6))
data.boxplot(column='Credit amount', by='Risk', patch_artist=True)
plt.title('Credit Amount Distribution - Good vs Bad Loans', fontsize=14, fontweight='bold')
plt.ylabel('Credit Amount ($)')
plt.xlabel('Loan Risk Category')

# Add some statistics
good_loans = data[data['Risk']=='good']['Credit amount']
bad_loans = data[data['Risk']=='bad']['Credit amount']

print(f"ðŸ“ˆ CREDIT AMOUNT STATISTICS:")
print(f"Good loans - Mean: ${good_loans.mean():.0f}, Median: ${good_loans.median():.0f}")
print(f"Bad loans  - Mean: ${bad_loans.mean():.0f}, Median: ${bad_loans.median():.0f}")
print(f"Difference: ${bad_loans.mean() - good_loans.mean():.0f}")

plt.show()

from sklearn.preprocessing import LabelEncoder

# Create a copy
df = data.copy()

# Encode categorical features
categorical_cols = ['Sex', 'Housing', 'Saving accounts', 'Checking account', 'Purpose']
for col in categorical_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col].astype(str))

# Prepare features and target
X = df.drop(['Unnamed: 0', 'Risk'], axis=1)
y = df['Risk']  # Keep target as text

#splitting data into training and testing sets

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print(f"Training: {X_train.shape}, Testing: {X_test.shape}")

from sklearn.tree import DecisionTreeClassifier

model = DecisionTreeClassifier(random_state=42, max_depth=5)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("Model trained!")

accuracy = accuracy_score(y_test, y_pred)
print(f" Accuracy: {accuracy:.2%}")

print("\n Classification Report:")
print(classification_report(y_test, y_pred))

conf_matrix = confusion_matrix(y_test, y_pred)
print("\nConfusion Matrix:")
print(conf_matrix)

plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()