# -*- coding: utf-8 -*-
"""PROGRAM18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zYlantKex2WiGtYsJcgABH7fm10z5OEK
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
import pandas as pd

advertising = pd.read_csv('/content/Company_Data.csv')
print(advertising.head())
print(advertising.describe())
print(advertising.info())

print("Feature values:")
# Select all columns except the target variable 'US'
x = advertising.drop('US', axis=1)

# Perform one-hot encoding on categorical columns
x = pd.get_dummies(x, columns=['ShelveLoc', 'Urban'], drop_first=True)

print(x)

print("Target variable values:")
# Select the target variable 'US'
y = advertising['US']

# Convert the target variable to numerical (0 for 'No', 1 for 'Yes')
y = y.map({'No': 0, 'Yes': 1})

print(y)

x_train, x_test, y_train, y_test = train_test_split(x, y,
test_size=0.3, random_state=42)
regressor = LinearRegression()
regressor.fit(x_train, y_train)
print("Intercept:", regressor.intercept_)
print("Coefficients:", regressor.coef_)

y_pred = regressor.predict(x_test)

print("Actual vs Predicted values:")
for actual, predicted in zip(y_test, y_pred):
  print("Actual value:", actual, "Predicted value:", predicted)

mislabeled_points = np.sum(np.round(y_test) != np.round(y_pred))
print("Number of mislabeled points from test data set:", mislabeled_points)

mae = metrics.mean_absolute_error(y_test, y_pred)
mse = metrics.mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)
print("Root Mean Squared Error:", rmse)

plt.figure(figsize=(10, 6))
plt.scatter(range(len(y_test)), y_test, color='blue', label='ActualValues')
plt.scatter(range(len(y_pred)), y_pred, color='red', label='PredictedValues', marker='x')
plt.title('Actual vs Predicted Values')
plt.xlabel('Data Point Index')
plt.ylabel('Target Variable')
plt.legend()
plt.show()